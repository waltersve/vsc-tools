{# Dictionary of created element to avoid duplicate elements #}
{% set bammElementDictonary = ({}) %}

{# Render the list of names as references for the given elements #}
{% macro element_names(elements) %}
    {%if elements %}{%- for element in elements -%}:{{ snake_to_camel(element.name.capitalize()) }}{{ " " if not loop.last else "" }}{% endfor %}{% endif %}
{% endmacro %}

{# Convert a string from snake to camel case #}
{% macro snake_to_camel(name) %}
    {%- for x in name.split('_') -%}
        {% if x != "t" %}{{ x.capitalize() if not loop.first else x }}{% endif %}
    {% endfor %}
{% endmacro %}

{# Render an Aspect definition based on a VSC Namespace #}
{% macro render_aspect(element) %}
:{{ element.name.capitalize() }} a bamm:Aspect ;
    bamm:name "{{ element.name.capitalize() }}" ;
    bamm:description "{{ element.description }}"@en ;
    bamm:properties () ;
    bamm:operations ( {{ element_names(element.methods) }} ) ;
    bamm:events ( {{ element_names(element.events) }} ) .
{% endmacro %}

{# Render a Operation definition based on a VSC Method #}
{% macro render_operation( method) %}
{% if not bammElementDictonary[method.name] %}
{%- set _ = bammElementDictonary.update({method.name: method}) -%}
:{{ snake_to_camel(method.name.capitalize()) }} a bamm:Operation ;
    bamm:name "{{ snake_to_camel(method.name.capitalize()) }}" ;
    bamm:description "{{ method.description }}"@en ;
    bamm:input ( {{ element_names(method.in_arguments) }} ) ;
    bamm:output ( {{ element_names([method.out_arguments[0]]) if method.out_arguments|length > 0 else "" }} ) .
{% endif %}
{% endmacro %}

{# Render a Property definition based on a VSC Member #}
{% macro render_property(member) %}
{% if not bammElementDictonary[member.name] -%}
{%- set _ = bammElementDictonary.update({member.name: member}) -%}
:{{ snake_to_camel(member.name.capitalize()) }} a bamm:Property ;
    bamm:name "{{ snake_to_camel(member.name.capitalize()) }}" ;
    bamm:description "{{ member.description }}"@en ;
    bamm:characteristic :Characteristic{{ member.name.capitalize() }} .
{% endif -%}
{% endmacro %}

{# Render an Event definition based on a VSC Event #}
{% macro render_event(event) %}
{% if not bammElementDictonary[event.name] %}
{%- set _ = bammElementDictonary.update({event.name: event}) -%}
:{{ snake_to_camel(event.name.capitalize()) }} a bamm:Event ;
    bamm:name "{{ snake_to_camel(event.name.capitalize()) }}" ;
    bamm:description "{{ event.description }}"@en ;
    bamm:parameters ( {{ element_names(event.in_arguments) }} ) .
{% endif %}
{% endmacro %}

{# Render an Entity definition based on a VSC Struct #}
{% macro render_entity(struct) %}
{% if not bammElementDictonary[struct.name] %}
{%- set _ = bammElementDictonary.update({struct.name: struct}) -%}
:{{ snake_to_camel(struct.name.capitalize()) }} a bamm:Entity ;
    bamm:name "{{ snake_to_camel(struct.name.capitalize()) }}" ;
    bamm:description "{{ struct.description }}"@en ;
    bamm:properties ( {{ element_names(struct.members) }} ) .
{% endif %}
{% endmacro %}

{# Render a Characteristic definition based on a VSC Member #}
{% macro render_characteristic(member) %}
{% if not bammElementDictonary["Characteristic" ~ member.name] %}
{%- set _ = bammElementDictonary.update({"Characteristic" ~ member.name: member}) -%}
:Characteristic{{ snake_to_camel(member.name.capitalize()) }} a {{ _render_characteristic_definition(member.type) if member.type else _render_characteristic_definition(member.datatype) }} ;
    bamm:name "Characteristic{{ snake_to_camel(member.name.capitalize()) }}" ;
    bamm:description "{{ member.description }}"@en ;
    {% if member.type %}
    bamm:datatype {{ "xsd:" ~ member.type if not member.type.endswith("_t") and not member.type.endswith("_t[]") else ":" ~ snake_to_camel(member.type.capitalize()) }} .
    {% else %}
    bamm:datatype {{ "xsd:" ~ member.datatype if not member.datatype.endswith("_t") and not member.datatype.endswith("_t[]") else ":" ~ snake_to_camel(member.datatype.capitalize()) }} .
    {% endif %}

{% if member.datatype and (member.min or member.max) -%}
{{- _render_trait_definition(member, "Characteristic" ~ snake_to_camel(member.name.capitalize())) -}}
{% endif -%}
{% endif %}
{% endmacro %}

{# Render an Trait and related Constraint definitions based on a VSC Datatype #}
{% macro _render_trait_definition(type, baseCharacteristic) %}
{% if not bammElementDictonary["Trait" ~ type.name] %}
{%- set _ = bammElementDictonary.update({"Trait" ~ type.name: type}) -%}
:Trait{{ snake_to_camel(type.name.capitalize()) }} a bamm-c:Trait ;
     bamm:name "Trait{{ snake_to_camel(type.name.capitalize()) }}" ;
     bamm:description "{{ type.description }}"@en ;
     bamm-c:constraint [
       {{ _render_range_constraint_definition(type, baseCharacteristic) | indent }}
     ] .
{% endif %}     
{% endmacro -%}

{% macro _render_range_constraint_definition(type, baseCharacteristic) %}
a bamm-c:RangeConstraint ;
    {% if type.min %}
    bamm-c:minValue {{ type.min }}
    bamm-c:lowerBoundDefinition bamm-c:AT_LEAST;
    {% endif %}
    {% if type.max %}
    bamm-c:maxValue {{ type.max }}
    bamm-c:upperBoundDefinition bamm-c:AT_MOST;
    {% endif %}
    bamm-c:baseCharacteristic :{{ baseCharacteristic }} ;
{% endmacro -%}

{% macro _render_characteristic_definition(type) %}
{% if type.endswith("[]") %}
    {{- "bamm-c:List" -}}
{% elif type.endswith("_t") %}
    {{- "bamm-c:SingleEntity" -}}
{% else %}
    {{- "bamm:Characteristic" -}}
{% endif %}
{% endmacro -%}

{# Render an Enumeration definition based on a VSC Enum #}
{% macro render_enumeration(enum) %}
{% if not bammElementDictonary[enum.name] %}
{%- set _ = bammElementDictonary.update({enum.name: enum}) -%}
:{{ snake_to_camel(enum.name.capitalize()) }} a bamm-c:Enumeration ;
    bamm:name {{ snake_to_camel(enum.name.capitalize()) }} ;
    bamm:dataType xsd:{{ enum.datatype }} ;
    bamm-c:values ( {% for option in enum.options %}{{ "\"" ~ option.value ~ "\"" if enum.datatype == "string" else option.value }}{{ " " if not loop.last else "" }}{% endfor %} ) .
{% endif %}    
{% endmacro %}